https://www.huskyhoochu.com/flux-architecture/

https://bestalign.github.io/translation/cartoon-guide-to-flux/



Flux != Redux
오늘날엔 Redux가 상태 매니저로 널리 사용되고 있습니다. 
최근엔 Redux가 기능에 비해 너무 과한 타이핑을 요구한다는 불만이 나오고 있죠. 
많은 개발자들이 Redux를 대체할 더 간단한 솔루션을 찾고 있고, React도 이런 요구에 발맞추기 위해 16.3 버전부터 Context API를 제공하고 있습니다. 
그런데 왜 원조 격인 flux 대신 Redux가 더 흥했던 걸까요? 그리고 왜 flux 컨셉을 따르고 있는데도 사람들은 왜 Redux를 벗어나려고 하는 걸까요?

Redux가 널리 쓰인 이유는 단순합니다. flux 패키지는 실제 프로젝트에 적용하도록 만들어졌다기보단 flux 패턴 컨셉을 시연한 수준이었고, 
Redux는 이 컨셉을 진지하게 적용한 프로젝트였기 때문입니다.

왜 Redux가 모두에게 만족스럽지 않은가, 하는 문제는 조금 복잡합니다. 
우선 Redux는 flux 패턴을 그대로 구현한 게 아닙니다. 
flux 패턴과 함수형 프로그래밍, 불변 데이터 컨셉을 적절히 버무려서 만들어졌습니다. 
핵심 철학에 있어서 flux와 다른 점이 많습니다.

Redux에는 디스패쳐 개념이 없습니다. 
간단히 말해서 “리듀서”가 “디스패쳐 + 스토어”의 기능을 담당합니다. 
(Redux의 스토어는 어플리케이션의 유일 객체로서 뷰 전체를 Wrapping하는 역할만 맡습니다) 
이벤트 에미터EventEmitter로 작동하는 디스패쳐를 생략하고 리듀서가 각 액션 타입에 대한 메서드를 순수 함수Pure Function로 구현하는 편이 더 낫다는 입장인데요. 
여기서 한 걸음 더 나아가 Redux는 리듀서가 관리하는 모든 상태를 immutable하도록 설정합니다. 
업데이트된 값은 기존의 상태에 overwrite되는 게 아니라 새로운 객체로 복사되어 리턴됩니다. 
각 리듀서는 서로를 의존할 수 없고 완전히 고립되어 있습니다.

두번째로, 위에서 언급했듯 Redux의 스토어는 싱글턴 패턴을 따릅니다. 
flux의 스토어가 각자의 상태만 간직한 채 여럿으로 공존했던 것과 달리, 
Redux는 상태를 지니는 역할을 리듀서로 넘긴 뒤 모든 종류의 리듀서가 단 하나의 스토어에 묶이도록 설계했습니다. 
각 뷰가 자신이 필요한 스토어만 각각 접근할 수 있었던 flux와 달리 Redux는 무조건 싱글 스토어를 통해 각 리듀서에 접근할 수 있습니다.

불변 데이터 컨셉으로 무결성을 보장하고 side-effect 없이 상태를 업데이트하도록 강제한 것은 분명 Redux의 장점입니다. 
하지만 이를 위해 디스패쳐를 이용한 유연한 업데이트 방식을 포기하고, 
중앙집중형 스토어를 구현함으로써 뷰가 데이터에 접근하는 방식을 무척 번거롭게 만든 것도 사실이죠.

Context API, Redux의 대안이 될 수 있을까?
Context API는 React 내부에 구현된 상태 관리 툴입니다. Redux보다 훨씬 작은 규모로, 
각 컴포넌트마다 개별적으로 운용할 수 있다는 장점이 있습니다.





