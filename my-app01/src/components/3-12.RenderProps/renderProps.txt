재사용의 한 방법(Composition / HOC / render props...)

코드를 공유하기 위해 함수 props를 이옹하는 테크닉
render props 패턴으로 구현된 컴포넌트는 자체적으로 렌더링 로직을
구현하는 대신, react 엘리먼트 요소를 반환하고 이를 호출하는 함수를 사용
<DataProvider 
    render={ data => (
        <h1>Hello {data.target}</h1>
    )}
/>
render props를 사용하는 라이브러리는 React Router, Downshift, Formik이 있다.



횡단 관심사(Cross-Cutting Concerns)를 위한 render props 사용법
컴포넌트는 React에서 코드의 재사용성을 위해 사용하는 주요 단위이다.
하지만 컴포넌트에서 캡슐화된 상태나 동작을 같은 상태를 가진 다른 컴포넌트와
공유하는 방법이 항상 명확하지 않다.


render 이외의 props 사용법
"render props pattern"은 꼭 prop name으로 render를 사용할 필요 없다

<Mouse render={mouse => (
    <p>The mouse position is {mouse.x},{mouse.y}</p>
)}/>

<Mouse children={mouse => (
    <p>The mouse position is {mouse.x},{mouse.y}</p>
)}/>


주의사항
React.PureComponent에서 render props pattern을 사용할 땐 주의
render props 패턴을 사용하면 이점이 사라질 수 있다.
얕은 prop 비교는 새로운 prop에 대해 항상 false를 반환한다.
이 경우 render마다 render prop으로 넘어온 값을 항상 새로 생성